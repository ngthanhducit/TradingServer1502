//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TradingServer.PriceQuotes {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tick", Namespace="http://schemas.datacontract.org/2004/07/TradingServer.Business")]
    [System.SerializableAttribute()]
    public partial class Tick : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AskField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HighAskField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HighInDayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsManagerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsUpdateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LowAskField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LowInDayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SymbolIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SymbolNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TickTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeCurrentField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Ask {
            get {
                return this.AskField;
            }
            set {
                if ((this.AskField.Equals(value) != true)) {
                    this.AskField = value;
                    this.RaisePropertyChanged("Ask");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Bid {
            get {
                return this.BidField;
            }
            set {
                if ((this.BidField.Equals(value) != true)) {
                    this.BidField = value;
                    this.RaisePropertyChanged("Bid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HighAsk {
            get {
                return this.HighAskField;
            }
            set {
                if ((this.HighAskField.Equals(value) != true)) {
                    this.HighAskField = value;
                    this.RaisePropertyChanged("HighAsk");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HighInDay {
            get {
                return this.HighInDayField;
            }
            set {
                if ((this.HighInDayField.Equals(value) != true)) {
                    this.HighInDayField = value;
                    this.RaisePropertyChanged("HighInDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsManager {
            get {
                return this.IsManagerField;
            }
            set {
                if ((this.IsManagerField.Equals(value) != true)) {
                    this.IsManagerField = value;
                    this.RaisePropertyChanged("IsManager");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsUpdate {
            get {
                return this.IsUpdateField;
            }
            set {
                if ((this.IsUpdateField.Equals(value) != true)) {
                    this.IsUpdateField = value;
                    this.RaisePropertyChanged("IsUpdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LowAsk {
            get {
                return this.LowAskField;
            }
            set {
                if ((this.LowAskField.Equals(value) != true)) {
                    this.LowAskField = value;
                    this.RaisePropertyChanged("LowAsk");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LowInDay {
            get {
                return this.LowInDayField;
            }
            set {
                if ((this.LowInDayField.Equals(value) != true)) {
                    this.LowInDayField = value;
                    this.RaisePropertyChanged("LowInDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SymbolID {
            get {
                return this.SymbolIDField;
            }
            set {
                if ((this.SymbolIDField.Equals(value) != true)) {
                    this.SymbolIDField = value;
                    this.RaisePropertyChanged("SymbolID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SymbolName {
            get {
                return this.SymbolNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SymbolNameField, value) != true)) {
                    this.SymbolNameField = value;
                    this.RaisePropertyChanged("SymbolName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TickTime {
            get {
                return this.TickTimeField;
            }
            set {
                if ((this.TickTimeField.Equals(value) != true)) {
                    this.TickTimeField = value;
                    this.RaisePropertyChanged("TickTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeCurrent {
            get {
                return this.TimeCurrentField;
            }
            set {
                if ((this.TimeCurrentField.Equals(value) != true)) {
                    this.TimeCurrentField = value;
                    this.RaisePropertyChanged("TimeCurrent");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PriceQuotes.IPriceQuotes")]
    public interface IPriceQuotes {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPriceQuotes/TopPriceByTimeFrame", ReplyAction="http://tempuri.org/IPriceQuotes/TopPriceByTimeFrameResponse")]
        string TopPriceByTimeFrame(int TimeFrame, int Num, string Symbol, System.DateTime Time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPriceQuotes/GetPriceByDateTime", ReplyAction="http://tempuri.org/IPriceQuotes/GetPriceByDateTimeResponse")]
        string GetPriceByDateTime(System.DateTime Time, int TimeFrame, string Symbol);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPriceQuotes/OnlineCandles", ReplyAction="http://tempuri.org/IPriceQuotes/OnlineCandlesResponse")]
        string OnlineCandles(int TimeFrame, string Symbol);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPriceQuotes/GetTickOnline", ReplyAction="http://tempuri.org/IPriceQuotes/GetTickOnlineResponse")]
        TradingServer.PriceQuotes.Tick[] GetTickOnline();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPriceQuotes/CheckQueueTick", ReplyAction="http://tempuri.org/IPriceQuotes/CheckQueueTickResponse")]
        TradingServer.PriceQuotes.Tick[] CheckQueueTick(int Number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPriceQuotes/CountQueueTick", ReplyAction="http://tempuri.org/IPriceQuotes/CountQueueTickResponse")]
        int CountQueueTick();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPriceQuotesChannel : TradingServer.PriceQuotes.IPriceQuotes, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PriceQuotesClient : System.ServiceModel.ClientBase<TradingServer.PriceQuotes.IPriceQuotes>, TradingServer.PriceQuotes.IPriceQuotes {
        
        public PriceQuotesClient() {
        }
        
        public PriceQuotesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PriceQuotesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PriceQuotesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PriceQuotesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string TopPriceByTimeFrame(int TimeFrame, int Num, string Symbol, System.DateTime Time) {
            return base.Channel.TopPriceByTimeFrame(TimeFrame, Num, Symbol, Time);
        }
        
        public string GetPriceByDateTime(System.DateTime Time, int TimeFrame, string Symbol) {
            return base.Channel.GetPriceByDateTime(Time, TimeFrame, Symbol);
        }
        
        public string OnlineCandles(int TimeFrame, string Symbol) {
            return base.Channel.OnlineCandles(TimeFrame, Symbol);
        }
        
        public TradingServer.PriceQuotes.Tick[] GetTickOnline() {
            return base.Channel.GetTickOnline();
        }
        
        public TradingServer.PriceQuotes.Tick[] CheckQueueTick(int Number) {
            return base.Channel.CheckQueueTick(Number);
        }
        
        public int CountQueueTick() {
            return base.Channel.CountQueueTick();
        }
    }
}
